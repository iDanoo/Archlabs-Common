#!/usr/bin/env bash


## This main installation portion, is sourced by al-hello
# this file is not meant to be executable or run by itself

# called directly if chosen to install packages
# takes no args, just make sure it is run after all dialogs
setup_Default_Packages() {
    install=("obmenu-generator" "perl-data-dump" "gtk2-perl" "perl-linux-desktopfiles")
    package_Operation "$obmenu" "None"
    install=("hexchat" "pidgin" "weechat" "irssi")
    package_Operation "$irc"
    install=("google-chrome" "chromium" "opera" "qutebrowser")
    package_Operation "$browser" "$rmfirefox" "firefox"
    install=("google-talkplugin")
    package_Operation "$google-talk" "None"
    install=("flashplugin")
    package_Operation "$flash" "None"
    install=("atom" "sublime-text-dev" "emacs" "mousepad")
    package_Operation "$editor" "$rmgeany" "geany"
    install=("tilix" "terminator" "rxvt-unicode" "tilda" "xfce4-terminal")
    package_Operation "$terminals"
    install=("pcmanfm" "nautilus" "nemo")
    package_Operation "$filemanager" "$rmthunar" "thunar"
    if ! grep -q '4' <<< "$window_manager"; then
        install=("xfburn" "simpleburn" "k3b")
        package_Operation "$burner"
        install=("xfce4-power-manager")
        package_Operation "$powermanager" "None"
        install=("xfce4-notifyd")
        package_Operation "$notify" "None" "dunst"
        install=("pamac-aur")
        package_Operation "$pamac" "None"
    fi
    install=("etcher" "mintstick-git" "unetbootin" "etcher-cli")
    package_Operation "$usb"
    install=("spotify" "nicotine" "lollypop" "rhythmbox" "clementine")
    package_Operation "$music" "$rmaudacious" "audacious" "audacious-plugins"
    install=("qt4" "vlc")
    package_Operation "$vlc" "None" "mpv"
    install=("gimp" "inkscape" "krita")
    package_Operation "$image"
    install=("simplescreenrecorder" "obs-studio" "guvcview" "peek")
    package_Operation "$capture"
    install=("kdenlive" "openshot" "lwks")
    package_Operation "$video"
    install=("libreoffice-still" "abiword" "calligra")
    package_Operation "$office"
    install=("thunderbird" "geary" "evolution" "mutt")
    package_Operation "$mail"
    install=("deluge" "transmission-gtk" "qbittorrent")
    package_Operation "$torrent"
    install=("gpick" "gcolor2")
    package_Operation "$colorp"
    install=("mpd" "cava" "s-tui" "slurm")
    package_Operation "$termapps"
    install=("dropbox")
    package_Operation "$dropbox" "None"
    install=("oomox" "wpgtk-git")
    package_Operation "$oomox" "None"
    install=("ttf-anonymous-pro" "ttf-font-awesome" "ttf-fira-code" "noto-fonts-emoji" "ttf-freefont")
    package_Operation "$fonts" "None"
    install=("nerd-fonts-complete")
    package_Operation "$nfonts" "None"
    install=("catfish")
    package_Operation "$catsearch" "None"
    install=("gnome-disk-utility" "gnome-system-monitor")
    package_Operation "$gnomed" "None"
    install=("plank" "docky" "cairo-dock")
    package_Operation "$dock"
    install=("evince" "zathura" "qpdfview" "mupdf")
    package_Operation "$pdf"
    install=("steam" "linux-steam-integration" "steam-native-runtime")
    package_Operation "$steam" "None"
}

# called directly if choosing any window managers
# takes no args, must be done after dialogs
setup_Window_Manager() {
    # send it al off to the package_Operation to install our choices
    install=("awesome" "bspwm" "i3-gaps" "xfce4")
    package_Operation "$window_manager"

    # Make sure that the config directories exist for chosen wm
    # for wm that arent chosen, remove their config from $HOME/.config
    _names=("awesome" "bspwm" "i3" "xfce4")
    for ((x=1; x<=${#_names[@]}; x++)); do
        y=$((x - 1))  # Fix for counting from 1 & arrays indexing from 0
        if grep -q "$x" <<< "$window_manager"; then
            echo -e "\nChosen Window Manager:\t${_names[$y]}" >>"$LOG" 2>&1
            if grep -q 'xfce4' <<< "${_names[$y]}"; then
                if ! [ -d "$CONF_PATH/xfce4/al-xfce-configs" ]; then
                    echo -e "Getting Missing Configs:\t${_names[$y]}" >>"$LOG" 2>&1
                    cp -rf /etc/skel/.config/xfce4/al-xfce-configs "$CONF_PATH/xfce4/"
                fi
                cp -rf "$CONF_PATH"/xfce4/al-xfce-configs/* "$CONF_PATH/xfce4/"
                rm -rf "$CONF_PATH"/xfce4/al-xfce-configs
                xfconf-query -c xfce4-desktop -v --create -p /desktop-icons/style -t int -s 0
            elif grep -q 'bspwm' <<< "${_names[$y]}"; then
                echo -e "Getting Missing Configs:\t${_names[$y]}" >>"$LOG" 2>&1
                if ! [ -d "$CONF_PATH/bspwm" ]; then
                    cp -rf /etc/skel/.config/bspwm "$CONF_PATH/"
                fi
                if ! [ -d "$CONF_PATH/sxhkd" ]; then
                    cp -rf /etc/skel/.config/sxhkd "$CONF_PATH/"
                fi
            elif ! [ -d "$CONF_PATH/${_names[$y]}" ]; then
                echo -e "Getting Missing Configs:\t${_names[$y]}" >>"$LOG" 2>&1
                cp -rf /etc/skel/.config/"${_names[$y]}" "$CONF_PATH/"
            fi
        elif [ -d "$CONF_PATH/${_names[$y]}" ]; then
            echo -e "Removing Configs:\t\t${_names[$y]}" >>"$LOG" 2>&1
            if grep -q 'bspwm' <<< "${_names[$y]}"; then
                rm -rf "$CONF_PATH/${_names[$y]:?}"
                if [ -d "$CONF_PATH/sxhkd" ]; then
                    rm -rf "$CONF_PATH/.config/sxhkd"
                fi
            elif grep -q 'xfce4' <<< "${_names[$y]}"; then
                if [ -d "$CONF_PATH/xfce4/al-xfce-configs" ]; then
                    rm -rf "$CONF_PATH/xfce4/al-xfce-configs"
                fi
            else
                rm -rf "$CONF_PATH/${_names[$y]:?}"
            fi
        fi
    done

    # Session setup
    for ((x=1; x<=${#_sessions[@]}; x++)); do
        y=$((x - 1))  # Fix for counting from 1 & arrays indexing from 0
        if grep -q "$x" <<< "$session"; then
            sudo sed -i "/user-session=/ c user-session=${_sessions[$y]}" /etc/lightdm/lightdm.conf
            sudo sed -i "/autologin-session=/ c autologin-session=${_sessions[$y]}" /etc/lightdm/lightdm.conf
            echo -e "\nChanging Login Session:\t${_sessions[$y]}" >>"$LOG" 2>&1
            break
        fi
    done
}

# called by main_Dialogs if choosing defaults
# must be called before trying to install or setup anything
default_App_Dialogs() {
    clear; echo -e "\n\n\n\tDuring the following steps you'll be asked to choose applications
    \n\tEnter the matching number of the application(s) you want installed
    \n\tAny combination of available apps can be picked\n\n\tJust enter their matching number(s) and press [${red}Enter${reg}]"
    draw_box $R $C $H $W $col
    read -n1 -rsp $'\n\n\tPress Any Key to Continue...\n\n'

    get=("Plank\t-  Stupidly simple"
         "Docky\t-  The finest dock no money can buy"
         "Cairo Dock\t-  Light, eye-candy filled dock and desklets")
    create_Dialog dock "Available Docks"
    get=("Chrome\t-  Popular and trusted web browser by gooogle"
         "Chromium\t-  Access the internet"
         "Opera\t-  Fast and secure web browser"
         "Qutebrowser\t-  A keyboard driven, vim-like browser")
    create_Dialog browser "Available Web Browsers.. Firefox is the default"
    if grep -q '[1-4]' <<< "$browser"; then
        if grep -q '1' <<< "$browser"; then
            create_Dialog google-talk "Install google talk plugin"
        fi
        create_Dialog rmfirefox "Want to uninstall Firefox"
        if ! [[ "$browser" == "1" ]] || ! grep -q '[yY1]' <<< "$rmfirefox"; then
            create_Dialog flash "Install Flash Plugin"
        fi
        clear; echo -e "\n\n\n\tArchLabs provides a local homepage ${b}~/.ArchLabs-homepage/index.html${reg}
        \n\tThis can be opened with a browser and set as the homepage if desired"
        draw_box $R $C 8 $W $col
        read -n1 -rsp $'\n\n\tPress Any Key to continue...\n\n'
    else
        create_Dialog flash "Install Flash Plugin"
    fi
    get=("Atom\t\t-  A modern hackable text editor"
         "Sublime\t-  Sophisticated text editor for code"
         "Emacs\t-  An extensible text editor"
         "Mousepad\t-  A simple text editor")
    create_Dialog editor "Available Text Editors.. Geany is the default"
    if grep '[1-4]' <<< "$editor"; then
        create_Dialog rmgeany "Want to uninstall Geany"
    fi
    get=("Tilix\t-  A tiling terminal emulator for Linux using GTK+ 3"
         "Terminator\t-  Terminal emulator that supports tabs and grids"
         "Urxvt\t-  A unicode enabled rxvt-clone terminal emulator"
         "Tilda\t-  A Gtk based drop down terminal for Linux and Unix"
         "XFCE4\t-  A terminal emulator primarly for the Xfce desktop")
    create_Dialog terminals "Available Terminal Emulators.. Termite is the default"
    if  grep '3' <<< "$terminals"; then
        clear; echo -e "\n\n\n\tYou can copy paste in urxvt with ${b}[Ctrl+Alt+c] [Ctrl+Alt+v]${reg}"
        draw_box $R $C 8 $W $col
        read -n1 -rsp $'\n\n\tPress Any Key to continue...\n\n'
    fi
    get=("Spotify\t-  A proprietary music streaming service"
         "Nicotine+\t-  A graphical client for Soulseek"
         "Lollypop\t-  Lollypop is a new GNOME music playing application"
         "Rhythmbox\t-  Music playback and management application"
         "Clementine\t-  A modern music player and library organizer")
    create_Dialog music "Available Music Players.. Audacious is the default"
    if grep -q '[1-3]' <<< "$music"; then
        create_Dialog rmaudacious "Want to uninstall Audacious"
    fi
    create_Dialog vlc "Mpv is the default video player, want to install VLC instead"
    get=("PCmanFM\t-  A fast and lightweight file manager"
         "Nautilus\t-  Access and organize files"
         "Nemo\t\t-  Cinnamon file manager, a fork of nautilus")
    create_Dialog filemanager "Available File Managers.. Thunar is the default"
    get=("SSR\t\t-  A feature-rich screen recorder"
         "OBS\t\t-  Free opensource streaming/recording software"
         "Guvcview\t-  Capture video from camera devices"
         "Peek\t\t-  A simple screen recorder for creating gifs")
    create_Dialog capture "Video Capture Software"
    get=("Kdenlive\t-  A non-linear video editor for Linux"
         "Openshot\t-  An open-source video editor for Linux"
         "Lightworks\t-  A professional video editing suite")
    create_Dialog video "Video Editors"
    get=("Gimp\t\t-  GNU Image Manipulation Program"
         "Inkscape\t-  Professional vector graphics editor"
         "Krita\t-  Edit and paint images")
    create_Dialog image "Image Editors"
    get=("Libre-Office\t-  Full featured office suite"
         "Abiword\t-  Fully-featured word processor"
         "Calligra\t-  A set of applications for productivity")
    create_Dialog office "Office Suites"
    get=("Evince\t-  Document viewer"
         "Zathura\t-  Minimalistic document viewer"
         "Qpdfview\t-  A tabbed PDF viewer"
         "Mupdf\t-  Lightweight PDF and XPS viewer")
    create_Dialog pdf "Document & PDF Viewers"
    get=("Etcher\t-  Burn images to SD cards & USB drives"
         "Mintstick\t-  Format or write images to usb-sticks"
         "Unetbootin\t-  Create bootable Live USB drives"
         "Etcher-cli\t-  Burn images to SD cards & USB drives")
    create_Dialog usb "USB Burners"
    get=("Thunderbird\t-  Standalone mail and news reader from mozilla"
         "Geary\t-  A lightweight email client for the GNOME desktop"
         "Evolution\t-  Manage your email, contacts and schedule"
         "Mutt\t\t-  Small but very powerful text-based mail client")
    create_Dialog mail "Mail Clients"
    get=("Hexchat\t-  A popular and easy to use graphical IRC client"
         "Pidgin\t-  Multi-protocol instant messaging client"
         "Weechat\t-  Fast, light and extensible IRC client"
         "Irssi\t-  Modular text mode IRC client")
    create_Dialog irc "Chat and IRC"
    get=("Deluge\t-  A BitTorrent client written in python"
         "Transmission\t-  Free BitTorrent client GTK+ GUI"
         "Qbittorrent\t-  An advanced BitTorrent client")
    create_Dialog torrent "Torrent Clients"
    get=("Gpick\t-  Advanced color picker using GTK+ toolkit"
         "Gcolor2\t-  A simple GTK+2 color selector")
    create_Dialog colorp "Color Tools"
    get=("Mpd+Mpc\t-  Server-side application for playing music"
         "Cava\t\t-  Console-based Audio Visualizer for Alsa"
         "S-Tui\t-  Terminal UI stress test and monitoring tool")
    create_Dialog termapps "Additional Terminal Apps"
    if ! grep -q '4' <<< "$window_manager"; then
        get=("XFburn\t-  A simple CD/DVD burning tool"
             "Simpleburn\t-  A GTK+ application for burning CDs/DVDs"
             "K3B\t\t-  Feature rich, easy to handle CD burner")
        create_Dialog burner "Disc Burners"
        create_Dialog notify "XFCE Notification Daemon.. Default is Dunst"
        create_Dialog powermanager "Install XFCE Power Manager"
        create_Dialog pamac "Install Pamac Package Manager"
    fi
    create_Dialog gnomed "Install Gnome Disks & System Monitor"
    create_Dialog catsearch "Install Catfish File Search"
    create_Dialog steam "Install Steam with Linux Steam Integration"
    create_Dialog dropbox "Install DropBox"
    create_Dialog fonts "Install Additional Favorite Font Families"
    create_Dialog nfonts "Install NerdFonts Complete (larger download 260M)"
    create_Dialog oomox "Install Oomox & Wpgtk for generating themes"
    create_Dialog obmenu "Install Obmenu Generator & Menu Switcher"

}

# Main function essentially
# asks user to install different things
# if certain conditions are met will vary the dialogs
main_Dialogs() {
    # if not a vm remove virtual utils
    if [ -z "${VM}" ] && sudo pacman -Qsq virtualbox &>/dev/null; then
        clear; echo -e "\n\n\n\t${g}System is not a Virtual Machine
        \n\tQueueing Removal of Virtualbox Guest Modules...${reg}"
        draw_box $R $C 8 $W $col; echo -e "\n\n"; sleep 2
        if [ -e /etc/xdg/autostart/vboxclient.desktop ]; then
            sudo rm -f /etc/xdg/autostart/vboxclient.desktop
        fi
        if pacman -Qsq virtualbox &>/dev/null; then
            rPkgs+=("$(sudo pacman -Qsq virtualbox)")
        fi
    fi

    # window manager and session
    create_Dialog desktop "Choose Additional Window Managers or Desktop Environments"
    if grep -q '[yY1]' <<< "$desktop"; then
        get=("Awesome\t-  Highly configurable framework window manager"
             "Bspwm\t-  Tiling window manager based on binary space partitioning"
             "i3 gaps\t-  A fork of i3wm with more features including gaps"
             "Xfce4\t-  A lightweight and modular DE based on GTK+ 2")
        create_Dialog window_manager "Available Window Managers & Desktop Environments"
        if grep -q '[1-4]' <<< "$window_manager"; then
            if grep -q '1' <<< "$window_manager"; then
                get+=("Awesome\t-  Highly configurable framework window manager")
                _sessions+=("awesome")
            fi
            if grep -q '2' <<< "$window_manager"; then
                get+=("Bspwm\t-  Tiling window manager based on binary space partitioning")
                _sessions+=("bspwm")
            fi
            if grep -q '3' <<< "$window_manager"; then
                get+=("i3 gaps\t-  A fork of i3wm, with more features including gaps")
                _sessions+=("i3")
            fi
            if grep -q '4' <<< "$window_manager"; then
                get+=("Xfce4\t-  A lightweight and modular DE based on GTK+ 2")
                _sessions+=("xfce")
            fi
            create_Dialog session "Which would you like as your login session?  Only pick one"
        fi
    fi

    # Main application dialogs... Moved to their own function
    # Dont be fooled there is a lot weighing on this one choice
    create_Dialog defaults "Select From Available Applications to Install"
    if grep -q '[yY1]' <<< "$defaults"; then
        default_App_Dialogs
    fi

    create_Dialog btooth "Setup & Install Support for Bluetooth"
    create_Dialog printer "Setup & Install Support for Printers"


    if [ -z "${VM}" ]; then
        create_Dialog lts_kernel "Switch to LTS kernel"
        if grep -q '[yY1]' <<< "$lts_kernel"; then
            setup_LTS_Kernel
        fi
    fi

}

# should be run after all dialogs and setup are done
# very small, loops package list for removal and installation
# ensures base-devel is installed and cleans cache
# checks if a package can be installed by pacman, if not falls back to yaourt
install_Selected_Packages() {
    sudo pacman -S base-devel --needed --noconfirm
    sudo pacman -Scc --noconfirm
    echo -e "\nInstall List:\t${Pkgs[*]}\nRemove List:\t${rPkgs[*]}" >>"$LOG" 2>&1

    for i in "${rPkgs[@]}"; do
        sudo pacman -Rns "$i" --noconfirm
    done

    # check pacman for each package
    for i in "${Pkgs[@]}"; do
        if pacman -Ssq ^"$i"$ &>/dev/null; then
            sudo pacman -S "$i" --needed --noconfirm
        else  # else use yaourt
            if grep -q "linux-steam-integration" <<< "$i"; then  # special case to stop pgp bitching
                yaourt --n-arg --skippgpcheck -S "$i" --needed --noconfirm
            else
                yaourt -S "$i" --needed --noconfirm
            fi
        fi
    done
}
