#!/usr/bin/env bash


# Library of functions required by al-hello
# should be sourced first before anything else is done
# this file is not meant to be executable or run by itself

# paths
BIN="/usr/bin"
MENU="$HOME/.config/openbox/menu.xml"
RC_PATH="$HOME/.config/openbox/rc.xml"
AUTOSTART="$HOME/.config/openbox/autostart"
HELPERS="$HOME/.config/xfce4/helpers.rc"
MIMEAPP="$HOME/.config/mimeapps.list"
CONF_PATH="$HOME/.config"
LOG="$HOME/.al-hello-log"

# checks for hardware
NV=$(lspci | grep -i "nvidia")
VM=$(dmesg | grep -i "hypervisor")

# box settings
R=2 C=5 H=12 W=83 col=1

# colour escapes for bash
b='\E[1;34m' red='\E[1;31m' g='\E[1;32m'
y='\E[1;33m' reg='\E[0m'

# Draws our nice little box surrounding dialogs
# Should be called after drawing the text
# Takes a number of args being,
# the starting row & column, the height & width, and the colour
draw_box() {
    HORZ="-" VERT="|" CORNER="+"
    BOX_HEIGHT=$(($3 - 1)) BOX_WIDTH=$(($4 - 1))
    T_ROWS=$(tput lines) T_COLS=$(tput cols)
    plot_char() {
        echo -e "\E[${1};${2}H"$3
    }
    echo -ne "\E[3${5}m"
    # Draw vertical lines
    count=1
    for ((r=$1; $count<=$BOX_HEIGHT; r++)); do
        plot_char $r $2 $VERT; count=$(($count + 1))
    done
    count=1
    c=$(($2 + $BOX_WIDTH))
    for ((r=$1; $count<=$BOX_HEIGHT; r++)); do
        plot_char $r $c $VERT; count=$(($count + 1))
    done
    # Draw horizontal lines
    count=1
    for ((c=$2; $count<=$BOX_WIDTH; c++)); do
        plot_char $1 $c $HORZ; count=$(($count + 1))
    done
    count=1
    r=$(($1 + $BOX_HEIGHT))
    for ((c=$2; $count<=$BOX_WIDTH; c++)); do
        plot_char $r $c $HORZ; count=$(($count + 1))
    done
    # Finish corners and reset colours
    plot_char $1 $2 $CORNER
    plot_char $1 $(($2 + $BOX_WIDTH)) $CORNER
    plot_char $(($1 + $BOX_HEIGHT)) $2 $CORNER
    plot_char $(($1 + $BOX_HEIGHT)) $(($2 + $BOX_WIDTH)) $CORNER
    tput sgr0
}

# Creates a dialog using args passed
# depending on size of list, adjust box height
# special case for yes/no dialogs
# Will loop itself until a proper is given
# special 0 case to allow skipping multi choice
create_Dialog() {
    clear
    case ${#get[@]} in
        6) H=21 ;;
        5) H=19 ;;
        4) H=17 ;;
        3) H=15 ;;
        2) H=12 ;;
        *) H=8
    esac
    # greater than 1 list
    if [ ${#get[@]} -gt 1 ] || grep -q 'login session' <<< "$2"; then
        echo -e "\n\n\n\t$2\n"
        for ((n=1; n<=${#get[@]}; n++)); do
            echo -e "\n\t${b}${n}${red}) ${reg}${get[$(($n - 1))]}"
        done
        if grep -q 'login session' <<< "$2"; then
            echo -e "\n\t${b}0${red})${reg} Openbox\t-  Skip this step and stay with Openbox"
            draw_box $R $C 12 $W $col; printf "\n\n: "
        else
            echo -e "\n\t${b}0${red})${reg}\t\t-  Skip This Step"
            draw_box $R $C $H $W $col; printf "\n\n: "
        fi
    else
        # 1 or less list is yes/no
        printf "\n\n\n\t$2?  ${red}[${b}y${red}/${b}N${red}]${reg}: "
        if grep -q 'Nvidia' <<< "$2"; then
            draw_box $R $C $H $W $col; tput cup 3 $((${#2} + 10))
        else
            draw_box $R $C $H $W $col; tput cup 3 $((${#2} + 18))
        fi
    fi
    read -r "$1"  # take input
    if [[ ${#get[@]} -lt 2 ]] && ! grep -q 'session' <<< "$2"; then
        case ${!1} in
            y|Y|YES|yes|1)
                :  # No-op on success.. More code may go here in the future if needed
                ;;
            n|N|NO|no|0|"")
                clear; echo -e "\n\n\n\tSkipping Step.."
                draw_box $R $C 8 $W $col; sleep 1
                ;;
            *)
                clear; echo -e "\n\n\n\tWrong Response
                \n\tTo skip this step enter ${red}0 ${reg}or ${red}n${reg} or just ${b}[${red}Enter${b}]${reg}"
                draw_box $R $C 8 $W $col; sleep 3
                create_Dialog "$1" "$2"
        esac
    elif grep -q "[1-${#get[@]}]" <<< "${!1}"; then
        : # No-op on success..  In the future I intend to move more code here if needed
    elif grep -q '[nN0]' <<< "${!1}" || [[ "${!1}" = "" ]]; then
        clear; echo -e "\n\n\n\tSkipping Step.."
        draw_box $R $C 8 $W $col; sleep 1
    else
        clear; echo -e "\n\n\n\tWrong Response
        \n\tTo skip this step enter ${red}0 ${reg}or ${red}n${reg} or just ${b}[${red}Enter${b}]${reg}$e_msg"
        draw_box $R $C 8 $W $col; sleep 3
        create_Dialog "$1" "$2"
    fi
    # logging responses in a nice format
    echo -e "\nMain Question:\t$2\nPackage Array:\t${get[@]}\nTotal Options:\t${#get[@]}\nInput Name:\t$1\nUser Answer:\t${!1}" >>$LOG 2>&1
    # reset everything just to be sure
    H=12
    if grep -q '[nN0]' <<< "${!1}" || [[ "${!1}" = "" ]]; then
        unset $1
    fi
    unset get
}

# depending on what is given add packages to list
# special cases for apps that require touchups
# or additional packages installed to work properly
# this function will write to the log:
# it's input values and what it attempts to do
package_Operation() {
    # check our answer was yes for single item lists
    if grep -q "[yY1]" <<< "$1" && [[ "$2" == "None" ]]; then
        Pkgs+=(${install[@]})
        # Package specific stuff
        if grep -q "obmenu" <<< "${install[@]}" && ! grep -q "switchmenu" $MENU; then
            echo -e "\nFixing Menu:\t$3" >>$LOG 2>&1
            sed -i '/al-kb-pipemenu/ a\
      <item label="Switch Menu">\
        <action name="Execute">\
          <command>switchmenu -dynamic</command>\
        </action>\
      </item>' $MENU
        elif grep -q "pamac" <<< "${install[@]}" && grep -q "pacli" $MENU; then
            echo -en "\nFixing Menu:\t$3" >>$LOG 2>&1
            sed -i 's/termite --exec=pacli/pamac-manager/g' $MENU
        elif grep -q "steam" <<< "${install[@]}"; then
            gpg --recv-keys 8876CC8EDAEC52CEAB7742E778E2387015C1205F
            sudo gpg --recv-keys 8876CC8EDAEC52CEAB7742E778E2387015C1205F
        elif grep -q "vlc" <<< "${install[@]}" && grep -q "mpv" $MENU; then
            echo -en "\nFixing Menu:\t$3" >>$LOG 2>&1
            sed -i 's/mpv --player-operation-mode=pseudo-gui/vlc/g' $MENU
        fi
    # Check number of each for multiple choice
    elif grep -q "[1-${#install[@]}]" <<< "$1" && [[ ${#install[@]} -gt 1 ]]; then
        for ((n=1; n<=${#install[@]}; n++)); do
            if grep -q "$n" <<< "$1"; then
                Pkgs+=(${install[$(($n - 1))]})
                # Package specific stuff
                if grep -q "s-tui" <<< "${install[$(($n - 1))]}"; then
                    Pkgs+=("python2-psutil")
                elif grep -q "kdenlive" <<< "${install[$(($n - 1))]}"; then
                    Pkgs+=("kdebase-runtime" "dvdauthor" "frei0r-plugins" "breeze breeze-gtk" "breeze-icons")
                elif grep -q "urxvt" <<< "${install[$(($n - 1))]}"; then
                    Pkgs+=("urxvt-perls" "xclip")
                elif grep -q "nautilus" <<< "${install[$(($n - 1))]}"; then
                    Pkgs+=("nautilus-open-terminal")
                elif grep -q "nemo" <<< "${install[$(($n - 1))]}"; then
                    Pkgs+=("nemo-fileroller" "nemo-preview" "nemo-share")
                elif grep -q "mpd" <<< "${install[$(($n - 1))]}"; then
                    Pkgs+=("ncmpcpp" "mpc")
                elif grep -q "cairo-dock" <<< "${install[$(($n - 1))]}"; then
                    Pkgs+=("cairo-dock-plug-ins")
                elif grep -q "zathura" <<< "${install[$(($n - 1))]}"; then
                    Pkgs+=("zathura-pdf-poppler")
                elif grep -q "mupdf" <<< "${install[$(($n - 1))]}"; then
                    Pkgs+=("mupdf-tools" "libmupdf")
                fi
                # removing something and changing menu etc.
                if grep -q '[yY1]' <<< "$2"; then
                    if grep -q "pcmanfm" <<< "${install[@]}"; then
                        echo -en "\nFixing Menu:\t$3" >>$LOG 2>&1
                        rm -rf $CONF_PATH/Thunar
                        sed -i '/thunar/d' $AUTOSTART
                        sed -i "s/${3}/${install[$(($n - 1))]}/g" $MENU $RC_PATH
                        sed -i "s/Thunar/${install[$(($n - 1))]}/g" $HELPERS
                        if grep -q '1' <<< "$1"; then
                            sed -i "s/Thunar/pcmanfm/g" $HELPERS
                            sed -i "s/Thunar-folder-handler/pcmanfm/g" $MIMEAPP
                        elif grep -q '2' <<< "$1"; then
                            sed -i "s/Thunar/nautilus/g" $HELPERS
                            sed -i 's/Thunar-folder-handler/org.gnome.Nautilus/g' $MIMEAPP
                        elif grep -q '3' <<< "$1"; then
                            gsettings set org.nemo.desktop show-desktop-icons false
                            gsettings set org.cinnamon.desktop.default-applications.terminal exec termite
                            sed -i 's/Thunar-folder-handler/org.gnome.Nautilus/g' $MIMEAPP
                        fi
                    fi
                    if grep -q "atom" <<< "${install[@]}"; then
                        echo -en "\nFixing Menu & Mimetypes: $3" >>$LOG 2>&1
                        rm -rf $CONF_PATH/geany
                        sed -i "s/${3}/${install[$(($n - 1))]}/g" $MENU $RC_PATH
                        if grep -q '2' <<< "$1"; then
                            sed -i "s/${3}/sublime_text_3/g" $MIMEAPP
                        elif grep -q '3' <<< "$1"; then
                            sed -i "s/${3}/emacs.desktop/g" $MIMEAPP
                        else
                            sed -i "s/${3}/${install[$(($n - 1))]}/g" $MIMEAPP
                        fi
                    fi
                    if grep -q "chromium" <<< "${install[@]}"; then
                        echo -en "\nFixing Exo-Open:\t$3" >>$LOG 2>&1
                        rm -rf $HOME/.mozilla
                        sed -i 's/${3}/${install[$(($n - 1))]}/g' $HELPERS $CONF_PATH/xfce4/al-xfce-configs/helpers.rc
                    fi
                    if grep -q "clementine" <<< "${install[@]}" && [[ $n -ge 3 ]]; then
                        echo -en "\nFixing Menu:\t$3" >>$LOG 2>&1
                        sed -i "s/${3}/${install[$(($n - 1))]}/g" $MENU $RC_PATH
                    fi
                else
                    if grep -q "thunderbird" <<< "${install[@]}" && ! grep -q "MailReader" $HELPERS; then
                        echo -en "\nFixing Exo-Open:\t$3" >>$LOG 2>&1
                        echo -e "MailReader=${install[$(($n - 1))]}" >> $HELPERS
                    fi
                fi
            fi
        done
    fi
    # If answer to remove was yes or if $2 is 'None'.. add $3 & $4 to removal list
    if grep -q '[yY1]' <<< "$1" || grep -q '[yY1]' <<< "$2"; then
        if ! grep -q "$3" <<< "${rPkgs[@]}" && [[ "$3" ]]; then
            rPkgs+=($3)
            if [[ "$4" ]] && ! grep -q "$4" <<< "${rPkgs[@]}"; then
                rPkgs+=($4)
            fi
        fi
    fi
    # logging
    echo -e "\nIncoming:\t${install[@]}\nInstall Answer:\t$1\nRemove Answer:\t$2\nRemove/Change:\t$3" >>$LOG 2>&1
    # make sury the incoming array is clean
    unset install
}

# Called exclusively with the intent of creating a swapfile
# Will only do anything if swap does not already exist
# loops itself when wrong size or formatting entered
# by design no more than 99999M or 99G is allowed
setup_swapfile() {
    if awk '/^Swap:/ {exit !$2}' <<< "$(free)"; then
        clear; echo -e "\n\n\n\t${g}Swap space found on disk...\n\n\tSkipping Swapfile Setup...${reg}"
        draw_box $R $C 8 $W $col; echo -e "\n\n"; sleep 2
    else
        create_Dialog swp "Would you like to setup a swapfile"
        if grep -q '[yY1]' <<< "$swp"; then
            create_Dialog cswp "Would you like to set a custom size"
            if grep -q '[yY1]' <<< "$cswp"; then
                echo -e "\n\n\n\tEnter the size of swap wanted 8192M or 8G for 8gb system
                \n\n\tM = Mebibytes, G = Gibibytes"
                draw_box $R $C 8 $W $col; printf "\n\n: "; read -r size
            fi
        fi
    fi

    if grep -q '[yY1]' <<< "$swp" && grep -q '[yY1]' <<< "$cswp"; then
        if [ -n "$size" ]; then
            if grep '^[1-9][0-9]*M$' <<< "$size" || grep '^[1-9][0-9]*G$' <<< "$size"; then
                echo "checking size wasnt too big"
                if grep '^[1-9][0-9][0-9].*G$' <<< "$size" || grep '^[1-9][0-9][0-9][0-9][0-9][0-9].*M$' <<< "$size"; then
                    clear; echo -e "\n\n\n\tSize Too Big...\n\n\tAs a failsafe, no more than 999999M or 99G is allowed"
                    draw_box $R $C 8 $W $col; sleep 1
                    read -n1 -rsp $'\n\n\tPress Any Key to continue...\n\n'
                    setup_swapfile
                else
                    sudo fallocate -l "$size" /swapfile && sudo chmod 600 /swapfile
                    sudo mkswap /swapfile && sudo swapon /swapfile
                    clear; echo -e "\n\n\n\tAppending to /ect/fstab\n"
                    echo "/swapfile                                 none           swap    defaults 0 0" | sudo tee -a /etc/fstab
                    # logging
                    echo -e "Set up Swapfile:\t$size" >>$LOG 2>&1
                fi
            else
                clear; echo -e "\n\n\n\tWrong Formatting...\n\n\tPlease make sure to end an upper case 'M' or 'G'"
                draw_box $R $C 8 $W $col; sleep 1
                read -n1 -rsp $'\n\n\tPress Any Key to continue...\n\n'
                setup_swapfile
            fi
        else
            clear; echo -e "\n\n\n\tNo size entered"; sleep 2
            draw_box $R $C 8 $W $col; sleep 1
            setup_swapfile
        fi
    elif grep -q '[yY1]' <<< "$swp"; then
        totalM="$(($(free --mega | awk '/^Mem:/{print $2}')+50))M"
        sudo fallocate -l "$totalM" /swapfile && sudo chmod 600 /swapfile
        sudo mkswap /swapfile && sudo swapon /swapfile
        clear; echo -e "\n\n\n\tAppending to /ect/fstab\n"
        echo "/swapfile                                 none           swap    defaults 0 0" | sudo tee -a /etc/fstab
        echo -e "Set up Swapfile:\t$totalM" >>$LOG 2>&1
    else
        echo -e "Not Setting up Swapfile" >>$LOG 2>&1
    fi
}

# Called directly if chosen to install bluetooth support
# takes no args, must be run after dialog
setup_Bluetooth() {
    clear
    sudo pacman -S bluez bluez-utils pulseaudio-bluetooth bluez-firmware blueman --needed --noconfirm
    sudo modprobe btusb
    sudo systemctl enable bluetooth.service
    clear; echo -e "\n\n\n\tBluetooth Setup Complete\n\n\n\tPlease See: https://wiki.archlinux.org/index.php/bluetooth"
    draw_box $R $C 8 $W $col; sleep 1
    read -n1 -rsp $'\n\n\tPress Any Key to continue...\n\n'
    echo -e "\nBluetooth Set Up: $btooth" >>$LOG 2>&1
}

# Called directly if chosen to install printer support
# takes no args, must be run after dialog
setup_Printer() {
    clear
    sudo pacman -S cups cups-filters cups-pdf cups-pk-helper bluez-cups foomatic-db \
         foomatic-db-ppds system-config-printer gutenprint hplip ghostscript gsfonts \
         foomatic-db-gutenprint-ppds foomatic-db-nonfree-ppds --needed --noconfirm
    echo -e 'polkit.addRule(function(action, subject) {\n    if (action.id == "org.opensuse.cupspkhelper.mechanism.all-edit" &&
        subject.isInGroup("wheel")){
        return polkit.Result.YES;\n    }\n});' | sudo tee -a /etc/polkit-1/rules.d/49-allow-passwordless-printer-admin.rules
    sudo cups-genppdupdate
    sudo systemctl enable org.cups.cupsd.service
    clear; echo -e "\n\n\n\tPrinter Setup Complete\n\n\n\tPlease See: https://wiki.archlinux.org/index.php/CUPS"
    draw_box $R $C 8 $W $col; sleep 1
    read -n1 -rsp $'\n\n\tPress Any Key to continue...\n\n'
    echo -e "\nPrinter Set Up: $printer" >>$LOG 2>&1
}
